let append = fun l1 -> fun l2 ->
  iter l1 (
    nil -> l2
  | cons(d, h, _) with res -> cons(d, h, res)
  )
;

let snoc = fun d -> fun l -> fun b ->
  iter l (
    nil -> cons(d, b, nil)
  | cons(d, h, _) with res -> cons(d, h, res)
  )
;

let append_slow = fun l2 ->
  iter l2 (
    nil -> fun l1 -> l1
  | cons(d, h, _) with res -> fun l1 -> res(snoc(d)(l1)(h))
  )
;

let rev_aux = fun l ->
  iter l (
    nil -> fun acc -> acc
  | cons(d, h, _) with res -> fun acc -> res(cons(d, h, acc))
  )
;

let reverse = fun l -> rev_aux(l)(nil);

let le = fun l1 ->
  let res1 =
    iter l1 (
      nil -> (fun l2 -> true * nil * l2) & nil
    | cons(d1, h1, _) with res1 ->
      (
        fun l2 ->
        let res2 =
          iter l2 (
            nil -> (false * cons(d1, h1, res1.r) * nil) & (nil * d1 * h1 * res1)
          | cons(d2, h2, _) with res2 ->
            let t2 * tmp = res2.r in
            let d1 * tmp = tmp in
            let h1 * res1 = tmp in
            (
              let cmp * tmp = res1.l(t2) in
              let t1 * t2 = tmp in
              cmp * cons(d1, h1, t1) * cons(d2, h2, t2)
            )
            &
            (cons(d2, h2, t2) * d1 * h1 * res1)
          )
        in
        res2.l
      )
      &
      cons(d1, h1, res1.r)
    )
  in
  res1.l
;

let insert = fun l ->
  let p =
    iter l (
      nil -> (fun d -> fun x -> cons(d, x, nil)) & nil
    | cons(d, y, _) with res -> (fun d' -> fun x ->
        let le * tmp = le(x)(y) in
        let x * y = tmp in
        if le
        then cons(d', x, cons(d, y, res.r))
        else cons(d, y, res.l(d')(x))) & cons(d, y, res.r)
    )
  in
  p.l
;

let sort = fun l ->
  iter l (
    nil -> nil
  | cons(d, a, _) with res -> insert(res)(d)(a)
  )
;

let app_tail = fun f -> fun l ->
  let l * is_tail =
    iter l (
      nil -> nil * inl f
    | cons(d, h, _) with res ->
      let t * is_tail = res in
      case is_tail (
        inl f -> cons(d, f(h), t) * inr false
      | inr tmp -> cons(d, h, t) * inr tmp
      )
    )
  in
  l
;

let compose_list = fun l ->
  iter l (
    nil -> fun a -> a
  | cons(d, f, _) with res -> fun a -> f(d * res(a))
  )
;

let dup_2 = fun (l: list(<> * bool)) ->
  iter l (
    nil -> nil
  | cons(d1, h, _) with res ->
    let d2 * h = h in
    cons(d1, h, cons(d2, h, res))
  )
;

let copy_2 = fun (l: list(<> * bool)) ->
  iter l (
    nil -> nil * nil
  | cons(d1, h, _) with res ->
    let d2 * h = h in
    let l1 * l2 = res in
    cons(d1, h, l1) * cons(d2, h, l2)
  )
;

let self_append_2 = fun l ->
  let l1 * l2 = copy_2(l) in
  append(l1)(l2)
;

let copy_3 = fun (l: list(<> * <> * bool)) ->
  iter l (
    nil -> nil * nil * nil
  | cons(d1, h, _) with res ->
    let d2 * h = h in
    let d3 * h = h in
    let l1 * tmp = res in
    let l2 * l3 = tmp in
    cons(d1, h, l1) * cons(d2, h, l2) * cons(d3, h, l3)
  )
;

let self_append_3 = fun l ->
  let l1 * tmp = copy_3(l) in
  let l2 * l3 = tmp in
  append(l1)(append(l2)(l3))
;

let self_append_3_slow = fun l ->
  let l1 * tmp = copy_3(l) in
  let l2 * l3 = tmp in
  append(append(l1)(l2))(l3)
;
